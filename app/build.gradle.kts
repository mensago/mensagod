/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)
    kotlin("plugin.serialization") version "1.9.0"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    mavenCentral()
    maven {
        setUrl("https://plugins.gradle.org/m2/")
    }
    maven {
        setUrl("https://maven.scijava.org/content/repositories/public/")
    }
}

dependencies {
    implementation("org.xerial:sqlite-jdbc:3.43.0.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")
    implementation("javax.activation:activation:1.1.1")

    // For Apache's awesome FileUtils
    implementation("commons-io:commons-io:2.13.0")

    // For parsing the server's config file
    implementation("io.hotmoka:toml4j:0.7.3")

    // JDBC Driver for Postgres because the integration tests interact directly with
    // the database.
    implementation("org.postgresql:postgresql:42.6.0")

    val coroutinesVersion = "1.7.2"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutinesVersion")

    // Needed by keznacl
    implementation("com.github.alphazero:Blake2b:bbf094983c")
    implementation("org.purejava:tweetnacl-java:1.1.2")
    implementation("de.mkammerer:argon2-jvm:2.11")

    // For the DNSHandler class
    implementation("org.minidns:minidns-hla:1.0.4")

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:1.8.10")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.9.2")
}

testing {
    suites {
        val integrationTest by registering(JvmTestSuite::class) {
            dependencies {
                implementation(project())
                implementation("javax.activation:activation:1.1.1")

                // TOML parsing needed for loading the mensagod server config file
                implementation("com.moandjiezana.toml:toml4j:0.7.2")

                // JDBC Driver for Postgres because the integration tests interact directly with
                // the database.
                implementation("org.postgresql:postgresql:42.6.0")

                // For easy recursive deletion of directories
                implementation("commons-io:commons-io:2.13.0")

                val coroutinesVersion = "1.7.2"
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutinesVersion")

                // For DNS testing
                implementation("org.minidns:minidns-hla:1.0.4")
            }
        }
    }
}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("mensagod.AppKt")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

